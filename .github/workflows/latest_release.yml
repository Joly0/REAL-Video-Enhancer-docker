name: Build and Push Release Docker Image

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  workflow_dispatch:  # Allow manual triggering
  push:
    branches:
      - main
    paths-ignore:  # Prevent triggering on updates to .last_dev_build
      - '.last_build'
      - '.last_dev_build'
      - '.last_prerelease_build'
      - 'dockerfile.dev'
      - 'dockerfile.pre'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Get latest release info
      id: release
      run: |
        RELEASE_INFO=$(curl -s https://api.github.com/repos/TNTwise/REAL-Video-Enhancer/releases/latest)
        echo "RELEASE_TAG=$(echo $RELEASE_INFO | jq -r .tag_name)" >> $GITHUB_OUTPUT
        echo "RELEASE_DATE=$(echo $RELEASE_INFO | jq -r .published_at)" >> $GITHUB_OUTPUT

    - name: Check for updates
      id: check
      run: |
        # Define individual conditions using proper bash syntax
        MANUAL_TRIGGER=$([[ "${{ github.event_name }}" == "workflow_dispatch" ]] && echo true || echo false)
        NEW_COMMIT_PUSHED=$([[ "${{ github.event_name }}" == "push" && "${{ github.actor }}" != "github-actions" ]] && echo true || echo false)
        NEW_RELEASE_DETECTED=$([[ ! -f .last_build ]] || [[ "$(cat .last_build)" != "${{ steps.release.outputs.RELEASE_TAG }}_${{ steps.release.outputs.RELEASE_DATE }}" ]] && echo true || echo false)
        
        # Check if any condition is true for proceeding with the build
        if [[ $MANUAL_TRIGGER == "true" || $NEW_COMMIT_PUSHED == "true" || $NEW_RELEASE_DETECTED == "true" ]]; then
          echo "update=true" >> $GITHUB_OUTPUT
        else
          echo "update=false" >> $GITHUB_OUTPUT
        fi

    - name: Prepare Docker metadata
      id: meta
      run: |
        echo "IMAGE_ID=$(echo ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} | tr '[A-Z]' '[a-z]')" >> $GITHUB_OUTPUT

    - name: Log in to the Container registry
      if: steps.check.outputs.update == 'true'
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      if: steps.check.outputs.update == 'true'
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.IMAGE_ID }}:latest
        file: ./dockerfile

    - name: Update last build info
      if: steps.check.outputs.update == 'true'
      run: |
        # Function to update .last_build
        update_last_build_file() {
          echo "$1" > .last_build
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .last_build
          git commit -m "Update last build info"
          git push
        }

        # Combine tag and date for the last build info
        RELEASE_TAG_DATE="${{ steps.release.outputs.RELEASE_TAG }}_${{ steps.release.outputs.RELEASE_DATE }}"
        if [[ -f .last_build ]]; then
          OLD_BUILD=$(cat .last_build)
          if [[ "$RELEASE_TAG_DATE" != "$OLD_BUILD" ]]; then
            update_last_build_file "$RELEASE_TAG_DATE"
          else
            echo "No new release, skipping the commit step."
          fi
        else
          update_last_build_file "$RELEASE_TAG_DATE"
        fi
